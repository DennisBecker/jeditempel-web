---
import Layout from "../../../../layouts/Layout.astro";
import createSlug from "../../../../lib/createSlug";

export async function getStaticPaths() {
    const response = await fetch("http://localhost:8080/guilds");
    const guilds = await response.json();

    const params = await Promise.all(
        guilds.map(async (guild) => {
            const tbReponse = await fetch("http://localhost:8080/territory-battles");
            const tbs = await tbReponse.json();

            const memberResponse = await fetch("http://localhost:8080/guilds/" + guild.guildId + "/players");
            const members = await memberResponse.json();

            const guildUnitResponse = await fetch("http://localhost:8080/guilds/" + guild.guildId + "/platoons");
            const guildUnits = await guildUnitResponse.json();

            const foo = await Promise.all(tbs.flatMap(async (tb) => {
                const response = await fetch("http://localhost:8080/territory-battles/" + tb.id + "/platoons");
                const platons = await response.json();

                return {
                    path: `/guilds/{guildId}/tb/{tbId}`,
                    params: { guildId: guild.guildId, tbId: createSlug(tb.name) },
                    props: { guild, members, tb, platons, guildUnits }
                };
            }));

            return foo.reduce(function(pre, cur) {
                return pre.concat(cur);
            });
        })
    );

    return params;
}

const { guild, members, tb, platons, guildUnits } = Astro.props;

function getGuildUnitQuantity(baseId, rarity, relicTier) {
        return guildUnits.filter((unit) => 
            unit.combatType === 1 
            ? baseId === unit.baseId && rarity == unit.currentRarity && unit.currentRelicTier >= relicTier 
            : baseId === unit.baseId && rarity == unit.currentRarity).length
    }
---

<Layout>
    <nav class="bg-gray-50 dark:bg-gray-700">
        <div class="max-w-screen-xl px-4 py-3 mx-auto">
            <div class="flex items-center">
                <ul class="flex flex-row font-medium mt-0 space-x-8 rtl:space-x-reverse text-sm">
                    <li>
                        <a href={"/guild/" + guild.guildId} class="text-gray-900 dark:text-white hover:underline">Guild Overview</a>
                    </li>
                    <li>
                        <a href={"/guild/" + guild.guildId + "/tb/rise-of-the-empire"} class="text-gray-900 dark:text-white hover:underline" aria-current="page">Territor Battles</a>
                    </li>
                </ul>
            </div>
        </div>
    </nav>
    <main class="container mx-auto pt-5 lg:pt-20">
        <h1 class="mb-4 text-4xl md:text-5xl lg:text-6xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white">{guild.name}</h1>

        <h2 class="text-3xl md:text-3xl lg:text-5xl font-extrabold dark:text-white">{tb.name}</h2>
        <h3 class="text-2xl md:text-3xl lg:text-4xl font-bold dark:text-white">Platoons</h3>

        <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
            <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" data-tabs-toggle="#default-tab-content" role="tablist">
                {platons.phases.map((phase) => (
                    <li class="me-2" role="presentation">
                    <button class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id={"tab-phase"+phase.phase} data-tabs-target={"#phase"+phase.phase} type="button" role="tab" aria-controls="profile">Phase {phase.phase}</button>
                </li>
                ))}
            </ul>
        </div>

        <div id="default-tab-content">
        {platons.phases.map((phase) => (
            <div class="hidden bg-gray-50 dark:bg-gray-800 relative overflow-x-auto" id={"phase"+phase.phase} role="tabpanel" aria-labelledby={"phase"+phase.phase+"-tab"}>
                <table class="w-full text-sm lg:text-base text-left rtl:text-right text-gray-500 dark:text-gray-400">
				    <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Unit</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Rarity</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Relic</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Quantity</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Available in Guild</th>
                        </tr>
                    </thead>
                    <tbody>
                        {phase.platoons.map((platoon) => (
                            <tr class={
                                getGuildUnitQuantity(platoon.unitId, platoon.rarity, platoon.relicTier) < platoon.quantity ? 
                                    "bg-red-500 dark:bg-red-800" : 
                                getGuildUnitQuantity(platoon.unitId, platoon.rarity, platoon.relicTier) == platoon.quantity ? 
                                    "bg-yellow-400 dark:bg-yellow-600" : 
                                    ""
                            }>
                                <th scope="row" class="p-1 lg:px-6 lg:py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {platoon.unitName}
                                </th>
                                <td class="p-1 lg:px-6 lg:py-4">{platoon.rarity}</td>
                                <td class="p-1 lg:px-6 lg:py-4">{platoon.relicTier}</td>
                                <td class="p-1 lg:px-6 lg:py-4">{platoon.quantity}</td>
                                <td class="p-1 lg:px-6 lg:py-4">{getGuildUnitQuantity(platoon.unitId, platoon.rarity, platoon.relicTier)}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        ))}
        </div>
    </main>
</Layout>
