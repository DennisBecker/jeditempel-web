---
import Layout from "@/layouts/Layout.astro";
import SubNavigation from "@/components/SubNavigation.astro";
import { getGuilds, getUnits, getTerritoryBattles, getGuildPlayers, getGuildPlatoons, getTerritoryBattleOperations } from '@/lib/apiClient';
import createSlug from "@/lib/createSlug";

export async function getStaticPaths() {
    const guilds = await getGuilds();
    const units = await getUnits();

    const params = await Promise.all(
        guilds.map(async (guild) => {
            const tbs = await getTerritoryBattles();
            const members = await getGuildPlayers(guild.guildId);
            const guildUnits = await getGuildPlatoons(guild.guildId);

            const paths = await Promise.all(tbs.flatMap(async (tb) => {
                const operations = await getTerritoryBattleOperations(tb.id);

                // operations within each phase with same unitBaseId should only be added once with a counter for the quantity
                const groupedOperations = {"phases": []};
                operations.phases.forEach(phase => {
                    groupedOperations.phases.push({"phase": phase.phase, "operations": []});
                    
                    phase.operations.forEach(operation => {
                        const existingOperation = groupedOperations.phases.find((p) => p.phase === phase.phase).operations.find((o) => o.unitId === operation.unitId);
                        if (existingOperation) {
                            existingOperation.quantity += 1
                        } else {
                            operation.quantity = 1;
                            groupedOperations.phases.find((p) => p.phase === phase.phase).operations.push(operation);
                        }
                    });
                });

                //console.log(groupedOperations.phases[0].operations[0]);

                return {
                    path: `/guilds/{guildId}/tb/{tbId}`,
                    params: { guildId: guild.guildId, tbId: createSlug(tb.name) },
                    props: { guild, units, members, tb, operations: groupedOperations, guildUnits }
                };
            }));

            return paths.reduce(function(pre, cur) {
                return pre.concat(cur);
            });
        })
    );

    return params;
}

const { guild, units, members, tb, operations, guildUnits } = Astro.props;

function getGuildUnitQuantity(baseId, rarity, relicTier) {
    return guildUnits.filter((unit) => 
        unit.combatType === 1 
        ? baseId === unit.baseId && rarity == unit.currentRarity && unit.currentRelicTier >= relicTier 
        : baseId === unit.baseId && rarity == unit.currentRarity).length
}

function getRequirement(baseId, rarity, relicTier) {
    return units.filter((unit) => baseId === unit.baseId)
    .map((unit) => {
        return unit.combatType === 1 ? "R" + relicTier : rarity + "*";
    })
}
---

<Layout>
    <SubNavigation guildId={guild.guildId} />
    <main class="container mx-auto pt-5 lg:pt-20">
        <h1 class="mb-4 text-4xl md:text-5xl lg:text-6xl font-extrabold leading-none tracking-tight text-gray-900 dark:text-white">{guild.name}</h1>

        <h2 class="text-3xl md:text-3xl lg:text-5xl font-extrabold dark:text-white">{tb.name}</h2>
        <h3 class="text-2xl md:text-3xl lg:text-4xl font-bold dark:text-white">Platoons</h3>

        <div class="mb-4 border-b border-gray-200 dark:border-gray-700">
            <ul class="flex flex-wrap -mb-px text-sm font-medium text-center" id="default-tab" data-tabs-toggle="#default-tab-content" role="tablist">
                {operations.phases.map((phase) => (
                    <li class="me-2" role="presentation">
                    <button class="inline-block p-4 border-b-2 rounded-t-lg hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300" id={"tab-phase"+phase.phase} data-tabs-target={"#phase"+phase.phase} type="button" role="tab" aria-controls="profile">Phase {phase.phase}</button>
                </li>
                ))}
            </ul>
        </div>

        <div id="default-tab-content">
        {operations.phases.map((phase) => (
            <div class="hidden bg-gray-50 dark:bg-gray-800 relative overflow-x-auto" id={"phase"+phase.phase} role="tabpanel" aria-labelledby={"phase"+phase.phase+"-tab"}>
                <table class="w-full text-sm lg:text-base text-left rtl:text-right text-gray-500 dark:text-gray-400">
				    <thead class="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Unit</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Requirement</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Quantity</th>
                            <th scope="col" class="px-3 py-2 lg:px-6 lg:py-3">Available in Guild</th>
                        </tr>
                    </thead>
                    <tbody>
                        {phase.operations.map((operation) => (
                            <tr class={
                                getGuildUnitQuantity(operation.unitId, operation.rarity, operation.requiredRelicTier) < operation.quantity ? 
                                    "bg-red-500 dark:bg-red-800 text-white dark:text-white" : 
                                getGuildUnitQuantity(operation.unitId, operation.rarity, operation.requiredRelicTier) == operation.quantity ? 
                                    "bg-yellow-400 dark:bg-yellow-600 text-white dark:text-white" : 
                                    ""
                            }>
                                <th scope="row" class="p-1 lg:px-6 lg:py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                    {operation.unitName}
                                </th>
                                <td class="p-1 lg:px-6 lg:py-4">{getRequirement(operation.unitId, operation.rarity, operation.requiredRelicTier)}</td>
                                <td class="p-1 lg:px-6 lg:py-4">{operation.quantity}</td>
                                <td class="p-1 lg:px-6 lg:py-4">{getGuildUnitQuantity(operation.unitId, operation.rarity, operation.requiredRelicTier)}</td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            </div>
        ))}
        </div>
    </main>
</Layout>
