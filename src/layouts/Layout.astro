---
import "agnostic-css/public/css-dist/common.resets.min.css";
import "agnostic-css/public/css-dist/common.min.css";
import "agnostic-css/src/components/header/header.css";
import "agnostic-css/src/components/header/headernav.css";
import "agnostic-css/src/components/header/headernavitem.css";
import "agnostic-css/src/components/button/button-base.css";
import "agnostic-css/src/components/button/button-core.css";
import "agnostic-css/src/components/button/button-empty.css";

import {Header, HeaderNav, HeaderNavItem} from "agnostic-astro";
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="stylesheet" href="/global.css" />
		<meta name="generator" content={Astro.generator} />
		<title>Jeditempel</title>
		<script>
			const STORAGE_KEY = "ag-color-scheme";
	  
			// First checks localStorage then system preferences
			const getColorScheme = () => {
			  if (!import.meta.env.SSR) {
				if (localStorage.getItem(STORAGE_KEY)) {
				  return localStorage.getItem(STORAGE_KEY);
				} else {
				  return window.matchMedia("(prefers-color-scheme: dark)").matches
					? "dark"
					: "light";
				}
			  }
			};
	  
			const setStoredColorScheme = (colorScheme) => {
			  if (!import.meta.env.SSR) {
				localStorage.setItem(STORAGE_KEY, colorScheme);
			  }
			};
	  
			const setTheme = (colorScheme) => {
			  if (!import.meta.env.SSR) {
				document.firstElementChild.setAttribute("color-scheme", colorScheme);
			  }
			};
	  
			// Sets the theme as early as possible to avoid a flash of incorrect theme
			setTheme(getColorScheme());
	  
			if (!import.meta.env.SSR) {
			  document.addEventListener("DOMContentLoaded", () => {
				// set on mounted too (screen readers)
				setTheme(getColorScheme());
	  
				requestAnimationFrame(() => {
				  // Defaults to dark mode (toggle to light icon)
				  let initial = "ðŸ”†";
				  if (
					document.firstElementChild.hasAttribute("color-scheme") &&
					document.firstElementChild.getAttribute("color-scheme") ===
					  "light"
				  ) {
					// We're in light mode so show toggle to dark icon
					initial = "ðŸŒ™";
				  }
				  // Creates a toggle button for the header and then clones for use on mobile sidebar
				  const toggle = document.createElement("button");
				  toggle.classList.add("item", "toggle");
				  toggle.textContent = initial;
				  const mobileToggle = toggle.cloneNode(true);
	  
				  const toggleHandler = (ev) => {
					// Get the current color mode then toggle it and update the store
					const currentMode =
					  document.firstElementChild.getAttribute("color-scheme");
	  
					const toggledColorScheme =
					  currentMode === "dark" ? "light" : "dark";
	  
					// Set toggled content and set html color-scheme attribute and update local storate
					// Note we need to keep the two toggles in sync (one is in header other is mobile sidebar)
					toggle.textContent = toggledColorScheme === "dark" ? "ðŸ”†" : "ðŸŒ™";
					mobileToggle.textContent =
					  toggledColorScheme === "dark" ? "ðŸ”†" : "ðŸŒ™";
					setTheme(toggledColorScheme);
					setStoredColorScheme(toggledColorScheme);
				  };
				  // cloneNode(true) doesn't copy over the event handlers so we have to attach here
				  [toggle, mobileToggle].forEach((el) =>
					el.addEventListener("click", toggleHandler)
				  );
	  
				  // Get the Vitepress navigation links and inject the toggle button
				  let navBars = document.getElementsByClassName("header-nav");
				  if (navBars) {
					// First navbar will be the one in header
					let headerNavBar = navBars[0];
					if (headerNavBar) {
					  headerNavBar.insertAdjacentElement("beforeend", toggle);
					}
				  }
				});
			  });
			}
		  </script>
	</head>
	<body>
		<Header>
			<a href="/">Jeditempel</a>
			<HeaderNav>
				<HeaderNavItem><a href="/">Home</a></HeaderNavItem>
				<HeaderNavItem>About</HeaderNavItem>
				<HeaderNavItem>Blog</HeaderNavItem>
				<HeaderNavItem>Contact</HeaderNavItem>
			</HeaderNav>
		</Header>
		<main>
			<slot />
		</main>
	</body>
</html>
